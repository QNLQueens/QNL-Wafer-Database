import pandas as pd
import plotly.express as px
import dash
from dash import Dash, html, dcc, dash_table
from dash.dependencies import Input, Output
import dash_ag_grid as dag

dataset = pd.read_excel(io ='QNL_SAMPLE_DATA.xlsx', sheet_name=None)
chip_data = dataset['Chips']
wafer_data = dataset['Wafers']
d0 = chip_data.loc[chip_data['Wafer'] == "QNL-000"]
d1 = chip_data.loc[chip_data['Wafer'] == "QNL-001"]
d2 = chip_data.loc[chip_data['Wafer'] == "QNL-002"]

app = dash.Dash(__name__)
app.title = "Wafer Database"

columnDefs = [
    { 'field': 'Chip ID' },
    { 'field': 'Owner'},
    { 'field': 'Device'},
]

#HTML Layout
app.layout = html.Div([
    
    html.Div([
        html.H2("Wafer Database"),
        html.Img(src="assets/qnllogo.jpeg")
    ], className = "banner"),
    
    
    html.H2("Select Wafer:", style = {'text-align':'left', 'font-size': "150%"}),
    dcc.Dropdown(id="select",
            options =[
                {"label": "QNL23-000", "value": 0},
                {"label": "QNL23-001", "value": 1},
                {"label": "QNL23-002", "value": 2}],
            multi = False,
            value = 0,
            style = {'width': "100%"} 
    ),
    
    
    html.Br(),
    html.Div(id='table', children=[], style = {'font-family': "Open Sans"}),
    html.Br(),
    html.Div([
        html.Div([
            html.Div([
                dcc.Tabs(id='tabs', value='tab-1', children=[
                    dcc.Tab(label='Ownership', value='tab-1'),
                    dcc.Tab(label='Device Map', value='tab-2'),
                ]),
                html.Div(id='fig'),
            ], className = "six columns"),
            
            html.Div(id='grid', className = "six columns"),
        ]),
    ], className = "row")    
])

@app.callback(
    Output(component_id='table', component_property='children'),
    Output(component_id='fig', component_property='children'),
    Output(component_id='grid', component_property='children'),
    Input('select', 'value'),
    Input('tabs', 'value')
)

def update_output(value, tab):
    ddata = d0
    wdata = wafer_data
    if value == 0:
        ddata = d0;
        wdata = wdata[:1]
    elif value == 1:
        ddata = d1;
        wdata = wdata[1:2]
    elif value == 2:
        ddata = d2;
        wdata = wdata[2:3]
    
    if tab == 'tab-1':
        figure = html.Div([dcc.Graph(figure= px.sunburst(ddata, path=['Owner', 'Device'], values='Size'))])
    elif tab == 'tab-2':
        figure = html.Img(src="assets/wafer_map.png")
        
    grid = dag.AgGrid(id="get-started-example-basic", rowData=ddata.to_dict("records"), columnDefs=columnDefs)
    table = dash_table.DataTable(wdata.to_dict('records'), [{"name": i, "id": i} for i in wdata.columns])
    return table, figure, grid, 

if __name__ == '__main__':
    app.run(jupyter_mode="external", port = 8050, debug = False)
