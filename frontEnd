import pandas as pd
import plotly.express as px
import dash
from dash import Dash, html, dcc, dash_table
from dash.dependencies import Input, Output

dataset = pd.read_excel(io ='QNLSampleData.xlsx', sheet_name=None)

data1 = dataset['Wafer Data']
data2 = dataset['QNL23-001']
data3 = dataset['QNL23-000']

colors = {
    'background': '#111111',
    'text': 'blue'
}

app = dash.Dash(__name__)
app.title = "Wafer Database"
#HTML Layout
app.layout = html.Div(style={'backgroundColor': 'white'}, children = [
    
    html.Img(src=dash.get_asset_url('qnllogo.jpeg'), width = 100, height = 100, className = "center"),
    
    
    html.H1("QNL Wafer Database", style = {'text-align':'center', 'font-family': 'Verdana', 'color': colors['text']}),
    
    html.H2("Select Wafer", style = {'text-align':'left'}),
    dcc.Dropdown(id="select",
                options =[
                    {"label": "QNL23-000", "value": 0},
                    {"label": "QNL23-001", "value": 1}],
                 multi = False,
                 value = 0,
                 style = {'width': "40%"}
                ),
    html.Div(id='output_container', children=[]),
    
    html.Div(id='dtable'),
    html.Div(id='graph'),

    
    html.Div(id='devices')
    
])



@app.callback(
    Output(component_id='dtable', component_property='children'),
    Output(component_id='graph', component_property='children'),
    Output(component_id='devices', component_property='children'),
    Input('select', 'value')
)

def update_output(value):
    if value == 0:
        ddata = data1; ddata = ddata[:1]
        dtable = dash_table.DataTable(ddata.to_dict('records'), [{"name": i, "id": i} for i in ddata.columns]),
    
    
        graph = html.Div([dcc.Graph(figure= px.sunburst(data3, path=['Owner', 'Device'], values='Size'))])
        
        devd = data2               
        devtable = dash_table.DataTable(devd.to_dict('records'), [{"name": i, "id": i} for i in devd.columns]),
    
    
    elif value == 1:
        ddata = data1; ddata = ddata[1:2]
        dtable = dash_table.DataTable(ddata.to_dict('records'), [{"name": i, "id": i} for i in ddata.columns]),
        
        graph = html.Div([dcc.Graph(figure= px.sunburst(data2, path=['Owner', 'Device'], values='Size'))])
                          
        devd = data3
        devtable = dash_table.DataTable(devd.to_dict('records'), [{"name": i, "id": i} for i in devd.columns]),
    
    return dtable, graph, devtable

if __name__ == '__main__':
    app.run(jupyter_mode="external", debug = False)
